name: apollo-dash0-demo

services:
  # Apollo Router v2 - The supergraph gateway
  router:
    image: ghcr.io/apollographql/router:v2.7.0
    ports:
      - "4000:4000"
      - "8088:8088"  # Health check endpoint
    env_file:
      - .env
    environment:
      - DASH0_AUTH_TOKEN=${DASH0_AUTH_TOKEN}
      - DASH0_METRICS_ENDPOINT=${DASH0_METRICS_ENDPOINT}
      - DASH0_TRACES_ENDPOINT=${DASH0_TRACES_ENDPOINT}
      - SERVICE_NAME=${SERVICE_NAME:-apollo-router-demo}
      - SERVICE_VERSION=${SERVICE_VERSION:-2.7}
      - ENVIRONMENT=${ENVIRONMENT:-demo}
    volumes:
      - ./router/router.yaml:/dist/config/router.yaml
      - ./router/supergraph.graphql:/dist/schema/supergraph.graphql
    command:
      - --config
      - /dist/config/router.yaml
      - --supergraph
      - /dist/schema/supergraph.graphql
    depends_on:
      - accounts
      - products-py
      - reviews
      - inventory
    healthcheck:
      test: ["CMD", "bash", "-c", "exec 3<>/dev/tcp/localhost/8088 && echo -e 'GET /health HTTP/1.0\\r\\n\\r\\n' >&3 && grep -q '200 OK' <&3"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    labels:
      - "com.dash0.demo=apollo-router"

  # Accounts Subgraph
  accounts:
    build:
      context: ./subgraphs/accounts
      dockerfile: Dockerfile
    ports:
      - "4001:4001"
    env_file:
      - .env
    environment:
      - PORT=4001
      - DASH0_AUTH_TOKEN=${DASH0_AUTH_TOKEN}
      - DASH0_METRICS_ENDPOINT=${DASH0_METRICS_ENDPOINT}
      - DASH0_TRACES_ENDPOINT=${DASH0_TRACES_ENDPOINT}
      - SERVICE_VERSION=${SERVICE_VERSION:-1.0.0}
      - ENVIRONMENT=${ENVIRONMENT:-demo}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--header=apollo-require-preflight: true", "http://localhost:4001/graphql?query={__typename}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    labels:
      - "com.dash0.demo=accounts-subgraph"

  # Products Subgraph (Node.js) - DISABLED
  # Using Python version (products-py) instead
  # To switch back to Node.js: uncomment this service and change router's depends_on to 'products'
  # products:
  #   build:
  #     context: ./subgraphs/products
  #     dockerfile: Dockerfile
  #   ports:
  #     - "4003:4003"
  #   env_file:
  #     - .env
  #   environment:
  #     - PORT=4003
  #     - DASH0_AUTH_TOKEN=${DASH0_AUTH_TOKEN}
  #     - DASH0_METRICS_ENDPOINT=${DASH0_METRICS_ENDPOINT}
  #     - DASH0_TRACES_ENDPOINT=${DASH0_TRACES_ENDPOINT}
  #     - SERVICE_VERSION=${SERVICE_VERSION:-1.0.0}
  #     - ENVIRONMENT=${ENVIRONMENT:-demo}
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--header=apollo-require-preflight: true", "http://localhost:4003/graphql?query={__typename}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 10s
  #   restart: unless-stopped
  #   labels:
  #     - "com.dash0.demo=products-subgraph-nodejs"

  # Products Subgraph (Python) - NOW ACTIVE
  # This is the primary products subgraph with enhanced schema and OTel instrumentation
  # To switch back to Node.js: uncomment the 'products' service above and change router's depends_on
  products-py:
    build:
      context: ./subgraphs/products-py
      dockerfile: Dockerfile
    ports:
      - "4003:4003"
    env_file:
      - .env
    environment:
      - PORT=4003
      - DASH0_AUTH_TOKEN=${DASH0_AUTH_TOKEN}
      - DASH0_METRICS_ENDPOINT=${DASH0_METRICS_ENDPOINT}
      - DASH0_TRACES_ENDPOINT=${DASH0_TRACES_ENDPOINT}
      - SERVICE_VERSION=${SERVICE_VERSION:-1.0.0}
      - ENVIRONMENT=${ENVIRONMENT:-demo}
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:4003/graphql').read()"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    labels:
      - "com.dash0.demo=products-subgraph-python"

  # Reviews Subgraph
  reviews:
    build:
      context: ./subgraphs/reviews
      dockerfile: Dockerfile
    ports:
      - "4002:4002"
    env_file:
      - .env
    environment:
      - PORT=4002
      - DASH0_AUTH_TOKEN=${DASH0_AUTH_TOKEN}
      - DASH0_METRICS_ENDPOINT=${DASH0_METRICS_ENDPOINT}
      - DASH0_TRACES_ENDPOINT=${DASH0_TRACES_ENDPOINT}
      - SERVICE_VERSION=${SERVICE_VERSION:-1.0.0}
      - ENVIRONMENT=${ENVIRONMENT:-demo}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--header=apollo-require-preflight: true", "http://localhost:4002/graphql?query={__typename}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    labels:
      - "com.dash0.demo=reviews-subgraph"

  # Inventory Subgraph
  inventory:
    build:
      context: ./subgraphs/inventory
      dockerfile: Dockerfile
    ports:
      - "4004:4004"
    env_file:
      - .env
    environment:
      - PORT=4004
      - DASH0_AUTH_TOKEN=${DASH0_AUTH_TOKEN}
      - DASH0_METRICS_ENDPOINT=${DASH0_METRICS_ENDPOINT}
      - DASH0_TRACES_ENDPOINT=${DASH0_TRACES_ENDPOINT}
      - SERVICE_VERSION=${SERVICE_VERSION:-1.0.0}
      - ENVIRONMENT=${ENVIRONMENT:-demo}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--header=apollo-require-preflight: true", "http://localhost:4004/graphql?query={__typename}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    labels:
      - "com.dash0.demo=inventory-subgraph"

  # Vegeta Load Generator (optional - use with --profile load-testing)
  vegeta:
    image: jauderho/vegeta
    depends_on:
      - router
    volumes:
      - ./vegeta:/etc/vegeta
    # 2 req/s
    # command: attack -targets=/etc/vegeta/targets.http -rate=0.8 -timeout=10s -duration=0 -output=/dev/null
    command: attack -targets=/etc/vegeta/targets.http -rate=10 -timeout=10s -duration=0 -output=/dev/null
    restart: unless-stopped
    labels:
      - "com.dash0.demo=load-generator"
    profiles:
      - load-testing

# Optional: Networks configuration for better isolation
networks:
  default:
    name: apollo-dash0-network
