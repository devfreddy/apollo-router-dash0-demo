# Apollo Router v2 Configuration
# Dash0 Observability Demo
# Environment variables are loaded from .env file via docker-compose

supergraph:
  # Enable introspection for development
  introspection: true
  # Listen on all interfaces
  listen: 0.0.0.0:4000
  # Query planning cache for performance
  query_planning:
    cache:
      in_memory:
        limit: 512

# Enable Apollo Sandbox for testing
sandbox:
  enabled: true

# Disable the default homepage (Sandbox will be the default)
homepage:
  enabled: false

# Include subgraph errors in responses for debugging
include_subgraph_errors:
  all: true

# Health check endpoint
health_check:
  enabled: true
  listen: 0.0.0.0:8088
  path: /health

# Telemetry configuration for Dash0
# IMPORTANT: Delta temporality is REQUIRED for accurate metrics with Dash0/PromQL
# Without it, histogram queries (rate, histogram_quantile) will not work correctly
telemetry:
  # Instrumentation configuration for spans and metrics
  instrumentation:
    # Span configuration
    spans:
      # Set default attribute requirement level to recommended
      default_attribute_requirement_level: recommended

      # Router-level spans
      router:
        attributes:
          otel.name: router
          operation.name: "router"
          resource.name:
            request_method: true

      # Supergraph-level spans
      supergraph:
        attributes:
          otel.name: supergraph
          operation.name: "supergraph"
          resource.name:
            operation_name: string
          # Error tracking - mark span as ERROR when GraphQL errors occur
          otel.status_code:
            static: ERROR
            condition:
              eq:
                - true
                - on_graphql_error: true
          error.message:
            response_errors: $[0].message

      # Subgraph-level spans
      subgraph:
        attributes:
          otel.name: subgraph
          operation.name: "subgraph"
          resource.name:
            subgraph_operation_name: string
          # Error tracking - mark span as ERROR when subgraph GraphQL errors occur
          otel.status_code:
            static: ERROR
            condition:
              eq:
                - true
                - subgraph_on_graphql_error: true
          error.message:
            subgraph_response_errors: $[0].message

    # Metric instruments configuration
    instruments:
      # Set default requirement level to required
      default_requirement_level: required

      # Router-level instruments
      router:
        # Enable standard OpenTelemetry HTTP metrics
        http.server.active_requests: true
        http.server.request.body.size: true
        http.server.request.duration:
          # Explicitly enable the metric and add custom attributes
          attributes:
            http.response.status_code: true
            graphql.operation.name:
              operation_name: string
            graphql.errors:
              on_graphql_error: true

      # Subgraph-level instruments
      subgraph:
        # Enable standard OpenTelemetry HTTP metrics for subgraphs
        http.client.request.body.size: true
        http.client.response.body.size: true
        http.client.request.duration:
          # Explicitly enable the metric and add custom attributes
          attributes:
            subgraph.name: true
            http.response.status_code:
              subgraph_response_status: code
            graphql.operation.name:
              supergraph_operation_name: string
            graphql.errors:
              subgraph_on_graphql_error: true

  exporters:
    # Configure metrics export to Dash0
    metrics:
      common:
        # Resource attributes for identifying this service
        resource:
          service.name: "${env.SERVICE_NAME:-apollo-router}"
          service.version: "${env.SERVICE_VERSION:-2.0}"
          deployment.environment: "${env.ENVIRONMENT:-demo}"

      # OpenTelemetry Protocol (OTLP) exporter for Dash0
      otlp:
        enabled: true
        # Dash0 metrics endpoint (loaded from .env)
        endpoint: "${env.DASH0_METRICS_ENDPOINT}"
        protocol: http

        # Delta temporality for proper counter/histogram metrics
        # Required for accurate rate calculations and PromQL queries
        temporality: delta

        # Dash0 authentication (loaded from .env)
        http:
          headers:
            "Authorization": "Bearer ${env.DASH0_AUTH_TOKEN}"
            "Dash0-Dataset": "${env.DASH0_DATASET}"

        # Batch processor settings for optimal performance
        batch_processor:
          scheduled_delay: 1s
          max_concurrent_exports: 100
          max_export_batch_size: 512
          max_export_timeout: 30s
          max_queue_size: 2048

    # Configure trace export to Dash0
    tracing:
      # Propagate trace context to subgraphs using W3C Trace Context format
      # This ensures subgraph traces are linked to router traces in the service map
      propagation:
        # W3C Trace Context (traceparent, tracestate headers)
        trace_context: true
        # Jaeger format (uber-trace-id header) - optional, for compatibility
        jaeger: false
        # Baggage (baggage header) - optional
        baggage: false
        # Datadog format - optional
        datadog: false
        # Zipkin B3 format - optional
        zipkin: false

      common:
        # Sample 100% of traces for demo purposes (adjust to 0.1 or lower for production)
        sampler: 1.0
        # Parent-based sampling respects upstream sampling decisions
        parent_based_sampler: true

        # Resource attributes
        resource:
          service.name: "${env.SERVICE_NAME:-apollo-router}"
          service.version: "${env.SERVICE_VERSION:-2.0}"
          deployment.environment: "${env.ENVIRONMENT:-demo}"

      # OpenTelemetry Protocol (OTLP) exporter for Dash0
      otlp:
        enabled: true
        # Dash0 traces endpoint (loaded from .env)
        endpoint: "${env.DASH0_TRACES_ENDPOINT}"
        protocol: http

        # Dash0 authentication (loaded from .env)
        http:
          headers:
            "Authorization": "Bearer ${env.DASH0_AUTH_TOKEN}"
            "Dash0-Dataset": "${env.DASH0_DATASET}"

        # Batch processor settings
        batch_processor:
          scheduled_delay: 1s
          max_concurrent_exports: 100
          max_export_batch_size: 512
          max_export_timeout: 30s
          max_queue_size: 2048

    # NOTE: Apollo Router v2.7.0 does not yet support OTLP Logs API
    # Use Fluent Bit sidecar container (see docker-compose.yaml) to collect router logs
    # and forward them to Dash0. See LOG_COLLECTION.md for details.

# Header propagation configuration
# Propagate specific headers from incoming requests to subgraph requests
headers:
  all:
    request:
      # Propagate W3C Trace Context headers to subgraphs
      - propagate:
          named: "traceparent"
      - propagate:
          named: "tracestate"
      # Propagate baggage headers
      - propagate:
          named: "baggage"

# CORS configuration for browser access (v2.7+ format)
# Port 4000: Required for Apollo Sandbox UI (served from the router itself)
# Port 3000: Pre-configured for potential frontend applications (React, Next.js, etc.)
cors:
  policies:
    - origins:
        - http://localhost:3000
        - http://localhost:4000
      allow_credentials: true

# Limits to prevent abuse (requires Apollo GraphOS Enterprise license)
# NOTE: These features require an Enterprise plan and proper GraphOS connection
# The router must successfully connect to GraphOS with APOLLO_KEY and APOLLO_GRAPH_REF
# limits:
#   max_depth: 100
#   max_height: 200
#   max_aliases: 30
#   max_root_fields: 20

# Traffic shaping for performance
traffic_shaping:
  # Router-level traffic shaping
  router:
    timeout: 50s
    global_rate_limit:
      capacity: 1000
      interval: 1s

  # Subgraph-level traffic shaping
  subgraphs:
    products:
      timeout: 10s
    reviews:
      timeout: 10s
    accounts:
      timeout: 5s
    inventory:
      timeout: 5s

# Experimental features
plugins:
  experimental.expose_query_plan: true
