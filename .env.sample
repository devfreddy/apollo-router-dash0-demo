# ============================================================================
# APOLLO ROUTER DASH0 DEMO - ENVIRONMENT CONFIGURATION TEMPLATE
# ============================================================================
# Copy this file to .env and fill in your actual values
#
# DO NOT commit the .env file to version control
# The .env file contains sensitive information (API tokens)
#
# Usage:
#   cp .env.sample .env
#   vim .env  # Edit with your values
#   source .env  # Load environment variables
#   ./tfwrap plan  # Use wrapper script to run terraform

# ============================================================================
# APOLLO GRAPHOS CONFIGURATION (Optional)
# ============================================================================
# If you want to publish your schema to Apollo GraphOS, configure these variables

# Service account key for Apollo GraphOS
# Format: service:GRAPH_NAME-XXXXX:TOKEN
# APOLLO_KEY=service:my-graph:YOUR_TOKEN_HERE
# APOLLO_GRAPH_REF=my-graph@current

# ============================================================================
# DASH0 CONFIGURATION - Observability Platform
# ============================================================================

# Dash0 API Authentication (REQUIRED for Terraform)
# Get your token from: https://app.dash0.com/settings/api-tokens
# Format: auth_XXXXXXXXXXXXX (starts with 'auth_')
DASH0_AUTHORIZATION_TOKEN=auth_REPLACE_WITH_YOUR_TOKEN_HERE

# Dash0 Auth Token for OpenTelemetry Exporters (REQUIRED for tracing)
# Same token as DASH0_AUTHORIZATION_TOKEN, used by Apollo Router and subgraphs
DASH0_AUTH_TOKEN=auth_REPLACE_WITH_YOUR_TOKEN_HERE

# Dash0 API URL (REQUIRED for Terraform)
# Default: https://api.dash0.com
# Use your custom URL if you have a self-hosted or regional instance
DASH0_URL=https://api.us-west-2.aws.dash0.com

# Dash0 Region for Metrics/Traces Export (used by Apollo Router)
# Options: us-west-2, eu-west-1, etc.
DASH0_REGION=us-west-2

# Dash0 Metrics and Traces Endpoints (used by Apollo Router)
DASH0_METRICS_ENDPOINT=https://ingress.us-west-2.aws.dash0.com/v1/metrics
DASH0_TRACES_ENDPOINT=https://ingress.us-west-2.aws.dash0.com/v1/traces

# ============================================================================
# TERRAFORM DASH0 CONFIGURATION
# ============================================================================

# Dash0 Dataset Name (where resources will be created)
# Must exist in your Dash0 instance
# Default: default
TERRAFORM_DASH0_DATASET=default

# Project Name (used for naming Terraform resources)
# This will be prefixed to all resource names
TERRAFORM_PROJECT_NAME=apollo-router

# Alert Thresholds for Checks
# Error Rate: percentage (0-100)
# Latency: milliseconds
TERRAFORM_ERROR_RATE_THRESHOLD=5.0
TERRAFORM_LATENCY_P95_MS=500
TERRAFORM_LATENCY_P99_MS=1000

# Synthetic Check Configuration
# Interval: seconds between checks
# Timeout: maximum duration for a single check
TERRAFORM_SYNTHETIC_CHECK_INTERVAL=60
TERRAFORM_SYNTHETIC_CHECK_TIMEOUT=10

# Feature Toggles for Terraform Deployment
# Set to "true" or "false" to enable/disable each component
TERRAFORM_ENABLE_CHECKS=true
TERRAFORM_ENABLE_DASHBOARDS=true
TERRAFORM_ENABLE_SYNTHETIC_CHECKS=false
TERRAFORM_ENABLE_VIEWS=false

# ============================================================================
# ENVIRONMENT AND SERVICE CONFIGURATION
# ============================================================================

# Application Environment (demo, staging, prod, etc.)
ENVIRONMENT=demo

# Apollo Router Service Name
# Must match the service.name in router configuration
SERVICE_NAME=apollo-router-demo

# Apollo Router Service Version
SERVICE_VERSION=2.7

# Subgraph Service Names (comma-separated, no spaces)
# These must match the service.name attributes in your OpenTelemetry instrumentation
SUBGRAPH_SERVICES=accounts-subgraph,products-subgraph-python,reviews-subgraph,inventory-subgraph

# ============================================================================
# LOAD TESTING CONFIGURATION
# ============================================================================

# Vegeta HTTP Load Generator Settings
# RATE: requests per second
# DURATION: how long to run (0 = continuous)
# TIMEOUT: maximum time per request
VEGETA_RATE=5
VEGETA_DURATION=0
VEGETA_TIMEOUT=10s

# ============================================================================
# TERRAFORM STATE CONFIGURATION (Optional)
# ============================================================================
# For team collaboration, use remote state instead of local

# S3 Backend Configuration (uncomment to use)
# TF_BACKEND_TYPE=s3
# TF_BACKEND_BUCKET=my-terraform-state
# TF_BACKEND_KEY=apollo-router/terraform.tfstate
# TF_BACKEND_REGION=us-west-2

# Terraform Cloud Backend Configuration (uncomment to use)
# TF_BACKEND_TYPE=cloud
# TF_CLOUD_ORG=my-organization
# TF_CLOUD_WORKSPACE=apollo-router

# ============================================================================
# HELPFUL NOTES
# ============================================================================
#
# 1. Getting Your Dash0 Token:
#    - Login to https://app.dash0.com
#    - Go to Settings → API Tokens
#    - Generate new token (starts with 'auth_')
#    - Copy full token value (including 'auth_' prefix)
#
# 2. Finding Your Dataset:
#    - In Dash0 UI, check Settings → Datasets
#    - Use the dataset name exactly as shown
#    - Default dataset is typically named 'default'
#
# 3. Service Names:
#    - Must match service.name in your application's OpenTelemetry config
#    - Check Apollo Router configuration in router/router.yaml
#    - Verify with: curl http://localhost:4000/metrics | grep service_name
#
# 4. Alert Thresholds:
#    - Adjust based on your SLOs (Service Level Objectives)
#    - P95 = 95th percentile latency (median-ish)
#    - P99 = 99th percentile latency (worst case)
#    - Start with defaults, tune after observing metrics
#
# 5. Running Terraform:
#    - Use ./tfwrap instead of terraform directly
#    - Example: ./tfwrap plan
#    - Example: ./tfwrap apply
#    - Environment variables are automatically sourced
#
# 6. Security:
#    - NEVER commit .env to git
#    - Add to .gitignore if not already present
#    - Use strong API tokens
#    - Rotate tokens quarterly
#
