# Apollo Router Helm Chart Values
# Configured for Dash0 Observability

# Router image configuration
image:
  repository: ghcr.io/apollographql/router
  tag: v2.7.0
  pullPolicy: IfNotPresent

# Replica configuration
replicaCount: 1

# Service configuration
service:
  type: LoadBalancer
  port: 4000
  annotations: {}

# Router configuration
router:
  args:
    - --hot-reload
    - --supergraph
    - /etc/apollo/supergraph.graphql

  # Full router configuration (inline YAML)
  configuration:
    supergraph:
      introspection: true
      listen: 0.0.0.0:4000
      query_planning:
        cache:
          in_memory:
            limit: 512

    sandbox:
      enabled: true

    homepage:
      enabled: false

    include_subgraph_errors:
      all: true

    health_check:
      enabled: true
      listen: 0.0.0.0:8088
      path: /health

    telemetry:
      instrumentation:
        spans:
          default_attribute_requirement_level: recommended
          router:
            attributes:
              otel.name: router
              operation.name: "router"
              resource.name:
                request_method: true
          supergraph:
            attributes:
              otel.name: supergraph
              operation.name: "supergraph"
              resource.name:
                operation_name: string
              otel.status_code:
                static: ERROR
                condition:
                  eq:
                    - true
                    - on_graphql_error: true
              error.message:
                response_errors: $[0].message
          subgraph:
            attributes:
              otel.name: subgraph
              operation.name: "subgraph"
              resource.name:
                subgraph_operation_name: string
              otel.status_code:
                static: ERROR
                condition:
                  eq:
                    - true
                    - subgraph_on_graphql_error: true
              error.message:
                subgraph_response_errors: $[0].message

        instruments:
          default_requirement_level: required
          router:
            http.server.active_requests: true
            http.server.request.body.size: true
            http.server.request.duration:
              attributes:
                http.response.status_code: true
                graphql.operation.name:
                  operation_name: string
                graphql.errors:
                  on_graphql_error: true
          subgraph:
            http.client.request.body.size: true
            http.client.response.body.size: true
            http.client.request.duration:
              attributes:
                subgraph.name: true
                http.response.status_code:
                  subgraph_response_status: code
                graphql.operation.name:
                  supergraph_operation_name: string
                graphql.errors:
                  subgraph_on_graphql_error: true

        events:
          router:
            error: error

      exporters:
        metrics:
          common:
            resource:
              service.name: "${env.SERVICE_NAME:-apollo-router}"
              service.version: "${env.SERVICE_VERSION:-2.0}"
              deployment.environment: "${env.ENVIRONMENT:-demo}"
          otlp:
            enabled: true
            endpoint: "${env.DASH0_METRICS_ENDPOINT}"
            protocol: http
            temporality: delta
            http:
              headers:
                Authorization: "Bearer ${env.DASH0_AUTH_TOKEN}"
                Dash0-Dataset: "${env.DASH0_DATASET}"
            batch_processor:
              scheduled_delay: 1s
              max_concurrent_exports: 100
              max_export_batch_size: 512
              max_export_timeout: 30s
              max_queue_size: 2048

        tracing:
          propagation:
            trace_context: true
            jaeger: false
            baggage: false
            datadog: false
            zipkin: false
          common:
            sampler: always_on
            parent_based_sampler: true
            resource:
              service.name: "${env.SERVICE_NAME:-apollo-router}"
              service.version: "${env.SERVICE_VERSION:-2.0}"
              deployment.environment: "${env.ENVIRONMENT:-demo}"
          otlp:
            enabled: true
            endpoint: "${env.DASH0_TRACES_ENDPOINT}"
            protocol: http
            http:
              headers:
                Authorization: "Bearer ${env.DASH0_AUTH_TOKEN}"
                Dash0-Dataset: "${env.DASH0_DATASET}"
            batch_processor:
              scheduled_delay: 1s
              max_concurrent_exports: 100
              max_export_batch_size: 512
              max_export_timeout: 30s
              max_queue_size: 2048

    cors:
      policies:
        - origins:
            - http://localhost:3000
            - http://localhost:4000
          allow_credentials: true

    traffic_shaping:
      router:
        timeout: 50s
        global_rate_limit:
          capacity: 1000
          interval: 1s
      subgraphs:
        products:
          timeout: 10s
        reviews:
          timeout: 10s
        accounts:
          timeout: 5s
        inventory:
          timeout: 5s

    plugins:
      experimental.expose_query_plan: true

# Environment variables for Dash0 configuration
extraEnvVars:
  - name: DASH0_AUTH_TOKEN
    valueFrom:
      secretKeyRef:
        name: dash0-auth
        key: token
  - name: DASH0_DATASET
    valueFrom:
      configMapKeyRef:
        name: apollo-config
        key: DASH0_DATASET
  - name: DASH0_METRICS_ENDPOINT
    valueFrom:
      configMapKeyRef:
        name: apollo-config
        key: DASH0_METRICS_ENDPOINT
  - name: DASH0_TRACES_ENDPOINT
    valueFrom:
      configMapKeyRef:
        name: apollo-config
        key: DASH0_TRACES_ENDPOINT
  - name: SERVICE_NAME
    valueFrom:
      configMapKeyRef:
        name: apollo-config
        key: SERVICE_NAME
  - name: SERVICE_VERSION
    valueFrom:
      configMapKeyRef:
        name: apollo-config
        key: SERVICE_VERSION
  - name: ENVIRONMENT
    valueFrom:
      configMapKeyRef:
        name: apollo-config
        key: ENVIRONMENT

# Mount supergraph schema
extraVolumes:
  - name: supergraph-schema
    configMap:
      name: supergraph-schema

extraVolumeMounts:
  - name: supergraph-schema
    mountPath: /etc/apollo/supergraph.graphql
    subPath: supergraph.graphql

# Resource limits
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /health
    port: 8088
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 8088
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Enable ServiceMonitor for Prometheus (optional)
serviceMonitor:
  enabled: false

# Ingress configuration (disabled - using LoadBalancer)
ingress:
  enabled: false

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "4000"
  prometheus.io/path: "/metrics"
  # Disable Dash0 operator auto-instrumentation since router has explicit telemetry config
  dash0.com/auto-instrumentation: "disabled"

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

# Pod security context
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
